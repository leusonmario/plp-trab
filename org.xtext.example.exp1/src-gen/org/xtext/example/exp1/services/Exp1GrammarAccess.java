/*
 * generated by Xtext 2.9.2
 */
package org.xtext.example.exp1.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Exp1GrammarAccess extends AbstractGrammarElementFinder {
	
	public class Exp1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.exp1.Exp1.Exp1");
		private final Assignment cExpressoesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressoesExpressaoParserRuleCall_0 = (RuleCall)cExpressoesAssignment.eContents().get(0);
		
		//Exp1:
		//	expressoes+=Expressao*;
		@Override public ParserRule getRule() { return rule; }
		
		//expressoes+=Expressao*
		public Assignment getExpressoesAssignment() { return cExpressoesAssignment; }
		
		//Expressao
		public RuleCall getExpressoesExpressaoParserRuleCall_0() { return cExpressoesExpressaoParserRuleCall_0; }
	}
	public class ExpressaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.exp1.Exp1.Expressao");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDecVariavelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpAritmeticaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expressao:
		//	DecVariavel | ExpAritmetica;
		@Override public ParserRule getRule() { return rule; }
		
		//DecVariavel | ExpAritmetica
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DecVariavel
		public RuleCall getDecVariavelParserRuleCall_0() { return cDecVariavelParserRuleCall_0; }
		
		//ExpAritmetica
		public RuleCall getExpAritmeticaParserRuleCall_1() { return cExpAritmeticaParserRuleCall_1; }
	}
	public class DecVariavelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.exp1.Exp1.DecVariavel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueVALORINTEIROTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//DecVariavel:
		//	'var' name=ID '=' value=VALORINTEIRO;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID '=' value=VALORINTEIRO
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=VALORINTEIRO
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//VALORINTEIRO
		public RuleCall getValueVALORINTEIROTerminalRuleCall_3_0() { return cValueVALORINTEIROTerminalRuleCall_3_0; }
	}
	public class ExpAritmeticaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.exp1.Exp1.ExpAritmetica");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cVALORINTEIROTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Assignment cSequelofAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cSequelofDecVariavelCrossReference_0_1_0 = (CrossReference)cSequelofAssignment_0_1.eContents().get(0);
		private final RuleCall cSequelofDecVariavelIDTerminalRuleCall_0_1_0_1 = (RuleCall)cSequelofDecVariavelCrossReference_0_1_0.eContents().get(1);
		private final RuleCall cOPERADORTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cVALORINTEIROTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Assignment cSequelofAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cSequelofDecVariavelCrossReference_2_1_0 = (CrossReference)cSequelofAssignment_2_1.eContents().get(0);
		private final RuleCall cSequelofDecVariavelIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSequelofDecVariavelCrossReference_2_1_0.eContents().get(1);
		
		//ExpAritmetica:
		//	(VALORINTEIRO | sequelof=[DecVariavel]) OPERADOR (VALORINTEIRO | sequelof=[DecVariavel]);
		@Override public ParserRule getRule() { return rule; }
		
		//(VALORINTEIRO | sequelof=[DecVariavel]) OPERADOR (VALORINTEIRO | sequelof=[DecVariavel])
		public Group getGroup() { return cGroup; }
		
		//(VALORINTEIRO | sequelof=[DecVariavel])
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//VALORINTEIRO
		public RuleCall getVALORINTEIROTerminalRuleCall_0_0() { return cVALORINTEIROTerminalRuleCall_0_0; }
		
		//sequelof=[DecVariavel]
		public Assignment getSequelofAssignment_0_1() { return cSequelofAssignment_0_1; }
		
		//[DecVariavel]
		public CrossReference getSequelofDecVariavelCrossReference_0_1_0() { return cSequelofDecVariavelCrossReference_0_1_0; }
		
		//ID
		public RuleCall getSequelofDecVariavelIDTerminalRuleCall_0_1_0_1() { return cSequelofDecVariavelIDTerminalRuleCall_0_1_0_1; }
		
		//OPERADOR
		public RuleCall getOPERADORTerminalRuleCall_1() { return cOPERADORTerminalRuleCall_1; }
		
		//(VALORINTEIRO | sequelof=[DecVariavel])
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//VALORINTEIRO
		public RuleCall getVALORINTEIROTerminalRuleCall_2_0() { return cVALORINTEIROTerminalRuleCall_2_0; }
		
		//sequelof=[DecVariavel]
		public Assignment getSequelofAssignment_2_1() { return cSequelofAssignment_2_1; }
		
		//[DecVariavel]
		public CrossReference getSequelofDecVariavelCrossReference_2_1_0() { return cSequelofDecVariavelCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSequelofDecVariavelIDTerminalRuleCall_2_1_0_1() { return cSequelofDecVariavelIDTerminalRuleCall_2_1_0_1; }
	}
	
	
	private final Exp1Elements pExp1;
	private final ExpressaoElements pExpressao;
	private final DecVariavelElements pDecVariavel;
	private final ExpAritmeticaElements pExpAritmetica;
	private final TerminalRule tOPERADOR;
	private final TerminalRule tVALORINTEIRO;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Exp1GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pExp1 = new Exp1Elements();
		this.pExpressao = new ExpressaoElements();
		this.pDecVariavel = new DecVariavelElements();
		this.pExpAritmetica = new ExpAritmeticaElements();
		this.tOPERADOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.exp1.Exp1.OPERADOR");
		this.tVALORINTEIRO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.exp1.Exp1.VALORINTEIRO");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.exp1.Exp1".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Exp1:
	//	expressoes+=Expressao*;
	public Exp1Elements getExp1Access() {
		return pExp1;
	}
	
	public ParserRule getExp1Rule() {
		return getExp1Access().getRule();
	}
	
	//Expressao:
	//	DecVariavel | ExpAritmetica;
	public ExpressaoElements getExpressaoAccess() {
		return pExpressao;
	}
	
	public ParserRule getExpressaoRule() {
		return getExpressaoAccess().getRule();
	}
	
	//DecVariavel:
	//	'var' name=ID '=' value=VALORINTEIRO;
	public DecVariavelElements getDecVariavelAccess() {
		return pDecVariavel;
	}
	
	public ParserRule getDecVariavelRule() {
		return getDecVariavelAccess().getRule();
	}
	
	//ExpAritmetica:
	//	(VALORINTEIRO | sequelof=[DecVariavel]) OPERADOR (VALORINTEIRO | sequelof=[DecVariavel]);
	public ExpAritmeticaElements getExpAritmeticaAccess() {
		return pExpAritmetica;
	}
	
	public ParserRule getExpAritmeticaRule() {
		return getExpAritmeticaAccess().getRule();
	}
	
	//terminal OPERADOR:
	//	'+' | '-';
	public TerminalRule getOPERADORRule() {
		return tOPERADOR;
	}
	
	//terminal VALORINTEIRO:
	//	'1'..'9' '0'..'9'*;
	public TerminalRule getVALORINTEIRORule() {
		return tVALORINTEIRO;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
