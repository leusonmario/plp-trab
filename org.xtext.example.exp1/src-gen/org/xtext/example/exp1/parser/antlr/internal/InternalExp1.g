/*
 * generated by Xtext 2.9.2
 */
grammar InternalExp1;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.exp1.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.exp1.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.exp1.services.Exp1GrammarAccess;

}

@parser::members {

 	private Exp1GrammarAccess grammarAccess;

    public InternalExp1Parser(TokenStream input, Exp1GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Exp1";
   	}

   	@Override
   	protected Exp1GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleExp1
entryRuleExp1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExp1Rule()); }
	iv_ruleExp1=ruleExp1
	{ $current=$iv_ruleExp1.current; }
	EOF;

// Rule Exp1
ruleExp1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExp1Access().getExpressoesExpressaoParserRuleCall_0());
			}
			lv_expressoes_0_0=ruleExpressao
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getExp1Rule());
				}
				add(
					$current,
					"expressoes",
					lv_expressoes_0_0,
					"org.xtext.example.exp1.Exp1.Expressao");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleExpressao
entryRuleExpressao returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressaoRule()); }
	iv_ruleExpressao=ruleExpressao
	{ $current=$iv_ruleExpressao.current; }
	EOF;

// Rule Expressao
ruleExpressao returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressaoAccess().getDecVariavelParserRuleCall_0());
		}
		this_DecVariavel_0=ruleDecVariavel
		{
			$current = $this_DecVariavel_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpressaoAccess().getExpAritmeticaParserRuleCall_1());
		}
		this_ExpAritmetica_1=ruleExpAritmetica
		{
			$current = $this_ExpAritmetica_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDecVariavel
entryRuleDecVariavel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecVariavelRule()); }
	iv_ruleDecVariavel=ruleDecVariavel
	{ $current=$iv_ruleDecVariavel.current; }
	EOF;

// Rule DecVariavel
ruleDecVariavel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getDecVariavelAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDecVariavelAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDecVariavelRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getDecVariavelAccess().getEqualsSignKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_VALORINTEIRO
				{
					newLeafNode(lv_value_3_0, grammarAccess.getDecVariavelAccess().getValueVALORINTEIROTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDecVariavelRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.xtext.example.exp1.Exp1.VALORINTEIRO");
				}
			)
		)
	)
;

// Entry rule entryRuleExpAritmetica
entryRuleExpAritmetica returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpAritmeticaRule()); }
	iv_ruleExpAritmetica=ruleExpAritmetica
	{ $current=$iv_ruleExpAritmetica.current; }
	EOF;

// Rule ExpAritmetica
ruleExpAritmetica returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_VALORINTEIRO_0=RULE_VALORINTEIRO
			{
				newLeafNode(this_VALORINTEIRO_0, grammarAccess.getExpAritmeticaAccess().getVALORINTEIROTerminalRuleCall_0_0());
			}
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpAritmeticaRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getExpAritmeticaAccess().getSequelofDecVariavelCrossReference_0_1_0());
					}
				)
			)
		)
		this_OPERADOR_2=RULE_OPERADOR
		{
			newLeafNode(this_OPERADOR_2, grammarAccess.getExpAritmeticaAccess().getOPERADORTerminalRuleCall_1());
		}
		(
			this_VALORINTEIRO_3=RULE_VALORINTEIRO
			{
				newLeafNode(this_VALORINTEIRO_3, grammarAccess.getExpAritmeticaAccess().getVALORINTEIROTerminalRuleCall_2_0());
			}
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpAritmeticaRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getExpAritmeticaAccess().getSequelofDecVariavelCrossReference_2_1_0());
					}
				)
			)
		)
	)
;

RULE_OPERADOR : ('+'|'-');

RULE_VALORINTEIRO : '1'..'9' ('0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
