/*
 * generated by Xtext 2.9.2
 */
package org.xtext.example.exp1.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.exp1.ide.contentassist.antlr.internal.InternalExp1Parser;
import org.xtext.example.exp1.services.Exp1GrammarAccess;

public class Exp1Parser extends AbstractContentAssistParser {

	@Inject
	private Exp1GrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalExp1Parser createParser() {
		InternalExp1Parser result = new InternalExp1Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExpressaoAccess().getAlternatives(), "rule__Expressao__Alternatives");
					put(grammarAccess.getExpAritmeticaAccess().getAlternatives_0(), "rule__ExpAritmetica__Alternatives_0");
					put(grammarAccess.getExpAritmeticaAccess().getAlternatives_2(), "rule__ExpAritmetica__Alternatives_2");
					put(grammarAccess.getDecVariavelAccess().getGroup(), "rule__DecVariavel__Group__0");
					put(grammarAccess.getExpAritmeticaAccess().getGroup(), "rule__ExpAritmetica__Group__0");
					put(grammarAccess.getExp1Access().getExpressoesAssignment(), "rule__Exp1__ExpressoesAssignment");
					put(grammarAccess.getDecVariavelAccess().getNameAssignment_1(), "rule__DecVariavel__NameAssignment_1");
					put(grammarAccess.getDecVariavelAccess().getValueAssignment_3(), "rule__DecVariavel__ValueAssignment_3");
					put(grammarAccess.getExpAritmeticaAccess().getSequelofAssignment_0_1(), "rule__ExpAritmetica__SequelofAssignment_0_1");
					put(grammarAccess.getExpAritmeticaAccess().getSequelofAssignment_2_1(), "rule__ExpAritmetica__SequelofAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalExp1Parser typedParser = (InternalExp1Parser) parser;
			typedParser.entryRuleExp1();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public Exp1GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(Exp1GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
