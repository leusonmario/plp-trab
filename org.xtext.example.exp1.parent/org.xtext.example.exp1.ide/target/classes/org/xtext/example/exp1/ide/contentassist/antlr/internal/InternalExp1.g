/*
 * generated by Xtext 2.9.2
 */
grammar InternalExp1;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.exp1.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.exp1.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.exp1.services.Exp1GrammarAccess;

}
@parser::members {
	private Exp1GrammarAccess grammarAccess;

	public void setGrammarAccess(Exp1GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleExp1
entryRuleExp1
:
{ before(grammarAccess.getExp1Rule()); }
	 ruleExp1
{ after(grammarAccess.getExp1Rule()); } 
	 EOF 
;

// Rule Exp1
ruleExp1 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExp1Access().getExpressoesAssignment()); }
		(rule__Exp1__ExpressoesAssignment)*
		{ after(grammarAccess.getExp1Access().getExpressoesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpressao
entryRuleExpressao
:
{ before(grammarAccess.getExpressaoRule()); }
	 ruleExpressao
{ after(grammarAccess.getExpressaoRule()); } 
	 EOF 
;

// Rule Expressao
ruleExpressao 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressaoAccess().getAlternatives()); }
		(rule__Expressao__Alternatives)
		{ after(grammarAccess.getExpressaoAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecVariavel
entryRuleDecVariavel
:
{ before(grammarAccess.getDecVariavelRule()); }
	 ruleDecVariavel
{ after(grammarAccess.getDecVariavelRule()); } 
	 EOF 
;

// Rule DecVariavel
ruleDecVariavel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDecVariavelAccess().getGroup()); }
		(rule__DecVariavel__Group__0)
		{ after(grammarAccess.getDecVariavelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpAritmetica
entryRuleExpAritmetica
:
{ before(grammarAccess.getExpAritmeticaRule()); }
	 ruleExpAritmetica
{ after(grammarAccess.getExpAritmeticaRule()); } 
	 EOF 
;

// Rule ExpAritmetica
ruleExpAritmetica 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpAritmeticaAccess().getGroup()); }
		(rule__ExpAritmetica__Group__0)
		{ after(grammarAccess.getExpAritmeticaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expressao__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressaoAccess().getDecVariavelParserRuleCall_0()); }
		ruleDecVariavel
		{ after(grammarAccess.getExpressaoAccess().getDecVariavelParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressaoAccess().getExpAritmeticaParserRuleCall_1()); }
		ruleExpAritmetica
		{ after(grammarAccess.getExpressaoAccess().getExpAritmeticaParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAritmetica__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpAritmeticaAccess().getVALORINTEIROTerminalRuleCall_0_0()); }
		RULE_VALORINTEIRO
		{ after(grammarAccess.getExpAritmeticaAccess().getVALORINTEIROTerminalRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpAritmeticaAccess().getSequelofAssignment_0_1()); }
		(rule__ExpAritmetica__SequelofAssignment_0_1)
		{ after(grammarAccess.getExpAritmeticaAccess().getSequelofAssignment_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAritmetica__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpAritmeticaAccess().getVALORINTEIROTerminalRuleCall_2_0()); }
		RULE_VALORINTEIRO
		{ after(grammarAccess.getExpAritmeticaAccess().getVALORINTEIROTerminalRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpAritmeticaAccess().getSequelofAssignment_2_1()); }
		(rule__ExpAritmetica__SequelofAssignment_2_1)
		{ after(grammarAccess.getExpAritmeticaAccess().getSequelofAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVariavel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVariavel__Group__0__Impl
	rule__DecVariavel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVariavel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVariavelAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getDecVariavelAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVariavel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVariavel__Group__1__Impl
	rule__DecVariavel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVariavel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVariavelAccess().getNameAssignment_1()); }
	(rule__DecVariavel__NameAssignment_1)
	{ after(grammarAccess.getDecVariavelAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVariavel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVariavel__Group__2__Impl
	rule__DecVariavel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVariavel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVariavelAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getDecVariavelAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVariavel__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DecVariavel__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVariavel__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDecVariavelAccess().getValueAssignment_3()); }
	(rule__DecVariavel__ValueAssignment_3)
	{ after(grammarAccess.getDecVariavelAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpAritmetica__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpAritmetica__Group__0__Impl
	rule__ExpAritmetica__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAritmetica__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAritmeticaAccess().getAlternatives_0()); }
	(rule__ExpAritmetica__Alternatives_0)
	{ after(grammarAccess.getExpAritmeticaAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAritmetica__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpAritmetica__Group__1__Impl
	rule__ExpAritmetica__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAritmetica__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAritmeticaAccess().getOPERADORTerminalRuleCall_1()); }
	RULE_OPERADOR
	{ after(grammarAccess.getExpAritmeticaAccess().getOPERADORTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAritmetica__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpAritmetica__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAritmetica__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAritmeticaAccess().getAlternatives_2()); }
	(rule__ExpAritmetica__Alternatives_2)
	{ after(grammarAccess.getExpAritmeticaAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp1__ExpressoesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExp1Access().getExpressoesExpressaoParserRuleCall_0()); }
		ruleExpressao
		{ after(grammarAccess.getExp1Access().getExpressoesExpressaoParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVariavel__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecVariavelAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getDecVariavelAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DecVariavel__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDecVariavelAccess().getValueVALORINTEIROTerminalRuleCall_3_0()); }
		RULE_VALORINTEIRO
		{ after(grammarAccess.getDecVariavelAccess().getValueVALORINTEIROTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAritmetica__SequelofAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpAritmeticaAccess().getSequelofDecVariavelCrossReference_0_1_0()); }
		(
			{ before(grammarAccess.getExpAritmeticaAccess().getSequelofDecVariavelIDTerminalRuleCall_0_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getExpAritmeticaAccess().getSequelofDecVariavelIDTerminalRuleCall_0_1_0_1()); }
		)
		{ after(grammarAccess.getExpAritmeticaAccess().getSequelofDecVariavelCrossReference_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAritmetica__SequelofAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpAritmeticaAccess().getSequelofDecVariavelCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getExpAritmeticaAccess().getSequelofDecVariavelIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getExpAritmeticaAccess().getSequelofDecVariavelIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getExpAritmeticaAccess().getSequelofDecVariavelCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_OPERADOR : ('+'|'-');

RULE_VALORINTEIRO : '1'..'9' ('0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
